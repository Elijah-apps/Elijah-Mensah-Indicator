//@version=5
indicator("YWBACH Indicator", overlay=true, max_labels_count=500)

// Input parameters for Pivot High
lengthGroupTitle = "LENGTH LEFT / RIGHT"
colorGroupTitle = "Text Color / Label Color"
leftLenH = input.int(title="Pivot High Left Length", defval=10, minval=1, inline="Pivot High", group=lengthGroupTitle)
rightLenH = input.int(title="Pivot High Right Length", defval=10, minval=1, inline="Pivot High", group=lengthGroupTitle)
textColorH = input.color(title="Pivot High Text Color", defval=color.black, inline="Pivot High", group=colorGroupTitle)
labelColorH = input.color(title="Pivot High Label Color", defval=color.white, inline="Pivot High", group=colorGroupTitle)


//Input parameters for Gann High Low which consist of moving average

HPeriod = input(13, 'HIGH Period')
LPeriod = input(21, 'LOW Period')

iff_1 = close < nz(ta.sma(low, LPeriod))[1] ? -1 : 0
HLd = close > nz(ta.sma(high, HPeriod))[1] ? 1 : iff_1
HLv = ta.valuewhen(HLd != 0, HLd, 0)
sma_1 = ta.sma(high, HPeriod)
sma_2 = ta.sma(low, LPeriod)
HiLo = HLv == -1 ? sma_1 : sma_2
HLcolor = HLv == -1 ? color.maroon : color.blue
plot(HiLo, linewidth=2, color=HLcolor)


alertcondition(ta.cross(close, HiLo), title='Price Cross Alert', message='Price - HiLo Crossing!')
alertcondition(ta.crossover(close, HiLo), title='PRICE CrossOver Alarm', message='LAST PRICE is ABOVE HiLo')
alertcondition(ta.crossunder(close, HiLo), title='PRICE CrossUnder Alarm', message='LAST PRICE is BELOW HiLo!')




// Input parameters for Pivot Low
leftLenL = input.int(title="Pivot Low Left Length", defval=10, minval=1, inline="Pivot Low", group=lengthGroupTitle)
rightLenL = input.int(title="Pivot Low Right Length", defval=10, minval=1, inline="Pivot Low", group=lengthGroupTitle)
textColorL = input.color(title="Pivot Low Text Color", defval=color.black, inline="Pivot Low", group=colorGroupTitle)
labelColorL = input.color(title="Pivot Low Label Color", defval=color.white, inline="Pivot Low", group=colorGroupTitle)

// Calculate Pivot High and Low
ph = ta.pivothigh(leftLenH, rightLenH)
pl = ta.pivotlow(leftLenL, rightLenL)

// Function to draw labels for pivots
drawLabel(_offset, _pivot, _style, _color, _textColor) =>
    if not na(_pivot)
        label.new(bar_index[_offset], _pivot, str.tostring(_pivot, format.mintick), style=_style, color=_color, textcolor=_textColor)

// Draw Pivot High and Low labels
drawLabel(rightLenH, ph, label.style_label_down, labelColorH, textColorH)
drawLabel(rightLenL, pl, label.style_label_up, labelColorL, textColorL)

// Calculate Central Pivot Point (CPR)
pivotHigh = ta.highest(high, 10)
pivotLow = ta.lowest(low, 10)
pivotClose = close[1]
centralPivot = (pivotHigh + pivotLow + pivotClose) / 3

// MACD calculation to define the bull/bear market
[macdLine, signalLine, _] = ta.macd(close, 12, 26, 9)
macdBullish = macdLine > signalLine  // Bullish when MACD is above the signal line
macdBearish = macdLine < signalLine  // Bearish when MACD is below the signal line

// Dynamic color for the CPR line based on MACD trend
cprColor = macdBullish ? color.green : color.red

// Draw CPR line with dynamic color based on MACD
plot(centralPivot, title="Central Pivot", color=cprColor, linewidth=2)

// Input for Bollinger Bands settings
lengthBB = input(20, title="Bollinger Bands Length")
multBB = input(2.0, title="Bollinger Bands Multiplier")
basis = ta.sma(close, lengthBB)
dev = multBB * ta.stdev(close, lengthBB)
upperBB = basis + dev
lowerBB = basis - dev

// Input for RSI settings
rsiLength = input(14, title="RSI Length")
rsiOverbought = input(70, title="RSI Overbought Level")
rsiOversold = input(30, title="RSI Oversold Level")
rsi = ta.rsi(close, rsiLength)

// Input for EMA settings
emaLength = input(200, title="EMA Length")
ema200 = ta.ema(close, emaLength)

// Calculate the Golden Ratio Fibonacci level (61.8%)
highLevel = ta.highest(high, lengthBB)
lowLevel = ta.lowest(low, lengthBB)
goldenRatio = input.float(title="Golden Ratio Multiplier", defval=1.618, step=0.001)
goldenFib = lowLevel + (goldenRatio * (highLevel - lowLevel))

// Determine color for the Golden Ratio line based on trend and momentum
trendColor = close > ema200 ? color.green : color.red  // Color based on EMA trend direction

// Check for momentum reversal using RSI
momentumReversal = (rsi < rsiOversold and close < lowerBB) or (rsi > rsiOverbought and close > upperBB)

// Final color for the Golden Ratio line
goldenFibColor = (momentumReversal) ? trendColor : color.gray

// Plot the Golden Ratio Fibonacci line with fixed thickness and color change
plot(goldenFib, title="Golden Ratio 61.8%", color=goldenFibColor, linewidth=4, style=plot.style_line)

// Plot buy/sell signals based on RSI and Bollinger Bands
buyCondition = (close < lowerBB) and (rsi < rsiOversold)
sellCondition = (close > upperBB) and (rsi > rsiOverbought)

// Define a minimum distance to prevent clustering
minDistance = 3  // Adjust this value based on your preference

// Variables to store the last signal's index
var int lastBuyIndex = na
var int lastSellIndex = na

// Boolean variables for buy/sell signals
var bool buySignal = false
var bool sellSignal = false

// Update the buy/sell signals based on conditions
if buyCondition and (na(lastBuyIndex) or (bar_index - lastBuyIndex > minDistance))
    buySignal := true
    lastBuyIndex := bar_index
else
    buySignal := false

if sellCondition and (na(lastSellIndex) or (bar_index - lastSellIndex > minDistance))
    sellSignal := true
    lastSellIndex := bar_index
else
    sellSignal := false

// Plot buy/sell signals with labels
plotshape(series=buySignal, title="BUY Signal", location=location.belowbar, style=shape.labelup, color=color.green, size=size.large, text="BUY", textcolor=color.white)
plotshape(series=sellSignal, title="SELL Signal", location=location.abovebar, style=shape.labeldown, color=color.red, size=size.large, text="SELL", textcolor=color.white)
